import { Router } from 'express'
import { RunQuery } from '../lib/connectionPool'
import sql = require('../lib/sql')
const { columns } = sql
import { DEFAULT_SYSTEM_SCHEMAS } from '../lib/constants'
import { Tables } from '../lib/interfaces'

const router = Router()
router.get('/', async (req, res) => {
  try {
    const { data } = await RunQuery(req.headers.pg, columns)
    const query: Fetch.QueryParams = req.query
    let payload: Tables.Column[] = data
    if (!query?.includeSystemSchemas) payload = removeSystemSchemas(data)
    return res.status(200).json(payload)
  } catch (error) {
    console.log('throwing error')
    res.status(500).send('Database error.')
  }
})
router.post('/', async (req, res) => {
  try {
  } catch (error) {
    console.log('throwing error')
    res.status(500).send('Database error.')
  }
})
router.patch('/:id', async (req, res) => {
  try {
  } catch (error) {
    console.log('throwing error')
    res.status(500).send('Database error.')
  }
})
router.delete('/:id', async (req, res) => {
  try {
  } catch (error) {
    console.log('throwing error')
    res.status(500).send('Database error.')
  }
})

export = router

const removeSystemSchemas = (data: Tables.Column[]) => {
  return data.filter((x) => !DEFAULT_SYSTEM_SCHEMAS.includes(x.schema))
}
const newColumnSql = ({
  name,
  default_value,
  is_identity = false,
  is_nullable = true,
  is_primary_key = false,
  data_type,
}: {
  name: string
  default_value?: string
  is_identity?: boolean
  is_nullable?: boolean
  is_primary_key?: boolean
  data_type: string
}) => {
  return `
${name} ${data_type}
${default_value === undefined ? '' : `DEFAULT ${default_value}`}
${is_identity ? 'GENERATED BY DEFAULT AS IDENTITY' : ''}
${is_nullable ? '' : 'NOT NULL'}
${is_primary_key ? 'PRIMARY KEY' : ''}`
}

/**
 * Types
 */
namespace Fetch {
  /**
   * @param {boolean} [includeSystemSchemas=false] - Return system schemas as well as user schemas
   */
  export interface QueryParams {
    includeSystemSchemas?: boolean
  }
}
