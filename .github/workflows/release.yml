name: Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  release:
    name: Release / Node ${{ matrix.node }}
    strategy:
      matrix:
        node: ['12']

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Get version before
        run: echo "VERSION_BEFORE=$(curl -s https://api.github.com/repos/supabase/pg-api/releases/latest | jq .name -r)" >> $GITHUB_ENV

      - name: Release on GitHub
        run: npx semantic-release -p        \
          @semantic-release/commit-analyzer \
          @semantic-release/github         \
          @semantic-release/release-notes-generator
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version after
        run: echo "VERSION_AFTER=$(curl -s https://api.github.com/repos/supabase/pg-api/releases/latest | jq .name -r)" >> $GITHUB_ENV

      - name: Check version difference
        run: |
          if [ $VERSION_BEFORE = $VERSION_AFTER ]; then
            echo 0 > has-new-release
          else
            echo 1 > has-new-release
          fi

      - uses: actions/upload-artifact@v1
        with:
          name: has-new-release
          path: has-new-release

  upload:
    name: Upload / Node ${{ matrix.node }}

    needs:
      - release

    strategy:
      matrix:
        node: ['12']

    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v1
        with:
          name: has-new-release

      - name: Check for new release
        run: echo "HAS_NEW_RELEASE=$(cat has-new-release/has-new-release)" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        if: $HAS_NEW_RELEASE == 1

      - uses: actions/cache@v1
        if: $HAS_NEW_RELEASE == 1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node
        if: $HAS_NEW_RELEASE == 1
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Prepare release
        if: $HAS_NEW_RELEASE == 1
        run: |
          npm ci
          npm run dist
          tar -czvf pg-api-linux.tar.gz -C ./bin pg-api-linux
          tar -czvf pg-api-macos.tar.gz -C ./bin pg-api-macos
          tar -czvf pg-api-windows.tar.gz -C ./bin pg-api-win.exe

      - name: Get upload url
        if: $HAS_NEW_RELEASE == 1
        run: echo "UPLOAD_URL=$(curl -s https://api.github.com/repos/supabase/pg-api/releases/latest | jq .upload_url -r)" >> $GITHUB_ENV

      - name: Upload linux release asset
        if: $HAS_NEW_RELEASE == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: $UPLOAD_URL
          asset_path: ./pg-api-linux.tar.gz
          asset_name: pg-api-linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload macos release asset
        if: $HAS_NEW_RELEASE == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: $UPLOAD_URL
          asset_path: ./pg-api-macos.tar.gz
          asset_name: pg-api-macos.tar.gz
          asset_content_type: application/gzip

      - name: Upload windows release asset
        if: $HAS_NEW_RELEASE == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: $UPLOAD_URL
          asset_path: ./pg-api-windows.tar.gz
          asset_name: pg-api-windows.tar.gz
          asset_content_type: application/gzip

      - name: Get version
        run: echo "VERSION=$(curl -s https://api.github.com/repos/supabase/pg-api/releases/latest | jq .name -r)" >> $GITHUB_ENV

      - name: Upload image to Docker Hub
        if: $HAS_NEW_RELEASE == 1
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: supabase/pg-api
          tags: latest,$VERSION
