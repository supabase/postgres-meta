

-- Tables for testing

CREATE TYPE public.user_status AS ENUM ('ACTIVE', 'INACTIVE');
CREATE TABLE public.users (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text,
  status user_status DEFAULT 'ACTIVE'
);
INSERT INTO 
    public.users (name) 
VALUES 
    ('Joe Bloggs'),
    ('Jane Doe');

CREATE TABLE public.todos (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  details text,
  "user-id" bigint REFERENCES users NOT NULL
);

INSERT INTO 
    public.todos (details, "user-id")
VALUES 
    ('Star the repo', 1),
    ('Watch the releases', 2);


CREATE FUNCTION add(integer, integer) RETURNS integer
    AS 'select $1 + $2;'
    LANGUAGE SQL
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;

create table public.users_audit (
    id BIGINT generated by DEFAULT as identity,
    created_at timestamptz DEFAULT now(),
    user_id bigint,
    previous_value jsonb
);

create function public.audit_action()
returns trigger as $$
begin
    insert into public.users_audit (user_id, previous_value)
    values (old.id, row_to_json(old));

    return new;
end;
$$ language plpgsql;

CREATE VIEW todos_view AS SELECT * FROM public.todos;

create materialized view todos_matview as select * from public.todos;

create function public.blurb(public.todos) returns text as
$$
select substring($1.details, 1, 3);
$$ language sql stable;

create extension postgres_fdw;
create server foreign_server foreign data wrapper postgres_fdw options (host 'localhost', port '5432', dbname 'postgres');
create user mapping for postgres server foreign_server options (user 'postgres', password 'postgres');
create foreign table foreign_table (
  id int8,
  name text,
  status user_status
) server foreign_server options (schema_name 'public', table_name 'users');

create or replace function public.function_returning_row()
returns public.users
language sql
stable
as $$
  select * from public.users limit 1;
$$;

create or replace function public.function_returning_set_of_rows()
returns setof public.users
language sql
stable
as $$
  select * from public.users;
$$;

create or replace function public.function_returning_table()
returns table (id int, name text)
language sql
stable
as $$
  select id, name from public.users;
$$;


create domain text_not_null as text not null;
create domain int_not_null as int not null;

create type composite_with_strict as (
  a text_not_null,
  b int_not_null
);
create domain strict_composite_with_strict as composite_with_strict not null;

create or replace function public.function_returning_table_of_strict(id int_not_null, name text_not_null)
returns table (id int_not_null, name text_not_null)
language sql
immutable
as $$
  select id, name;
$$;

create or replace function public.function_with_array_of_strict(id int_not_null[], name text_not_null[])
returns table (id int_not_null[], name text_not_null[])
language sql
immutable
as $$
  select id, name;
$$;

create or replace function public.function_with_composite_with_strict(obj composite_with_strict)
returns composite_with_strict
language sql
immutable
as $$
  select obj;
$$;

create or replace function public.function_with_strict_composite_with_strict(obj strict_composite_with_strict)
returns strict_composite_with_strict
language sql
immutable
as $$
  select obj;
$$;

create domain text_array as text[];
create domain text_array_strict as text_not_null[] not null;

create or replace function public.function_with_domain_array(arr text_array)
returns text_array
language sql
immutable
as $$
  select arr;
$$;

create or replace function public.function_with_domain_array_strict(arr text_array_strict)
returns text_array_strict
language sql
immutable
as $$
  select arr;
$$;

create table public.table_with_domain (
  name text_not_null,
  status_code int_not_null
);
